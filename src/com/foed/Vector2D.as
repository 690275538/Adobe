package com.foed{	import flash.display.Graphics;		/**	 * A 基本的二维矢量类	 */	public class Vector2D	{		private var _x:Number;		private var _y:Number;				/**		 * 构造函数.		 */		public function Vector2D(x:Number = 0, y:Number = 0)		{			_x = x;			_y = y;		}				/**		 * 可用于可视化向量。一般只用于调试目的.		 * @param 图形图形实例绘制矢量.		 * @param 颜色的线的颜色,用来表示向量.		 */		public function draw(graphics:Graphics, color:uint = 0):void		{			graphics.lineStyle(0, color);			graphics.moveTo(0, 0);			graphics.lineTo(_x, _y);		}				/**		 * 生成一份这个向量.		 * @return Vector2D复制这个向量.		 */		public function clone():Vector2D		{			return new Vector2D(x, y);		}				/**		 * 设置这个向量的x和y值,因此长度,为零.		 * @return Vector2D引用这个向量.		 */		public function zero():Vector2D		{			_x = 0;			_y = 0;			return this;		}				/**		 * 是否这个向量等于零,即它的x,y,和长度为零.		 * @return 布尔真如果向量是零,否则假.		 */		public function isZero():Boolean		{			return _x == 0 && _y == 0;		}				/**		 * 设置/获取长度或大小的矢量。改变长度将改变x和y,但不是这个向量的角度.		 */		public function set length(value:Number):void		{			var a:Number = angle;			_x = Math.cos(a) * value;			_y = Math.sin(a) * value;		}		public function get length():Number		{			return Math.sqrt(lengthSQ);		}				/**		 * Gets 这个向量的长度,的平方.		 */		public function get lengthSQ():Number		{			return _x * _x + _y * _y;		}				/**		 * Gets / sets 这个向量的角度。改变角度改变x和y,但保留了相同的长度.		 */		public function set angle(value:Number):void		{			var len:Number = length;			_x = Math.cos(value) * len;			_y = Math.sin(value) * len;		}		public function get angle():Number		{			return Math.atan2(_y, _x);		}				/**		 * 这个向量规范化。相当于设置长度,但更有效。		 * @return Vector2D引用这个向量. 		 */		public function normalize():Vector2D		{			if(length == 0)			{				_x = 1;				return this;			}			var len:Number = length;			_x /= len;			_y /= len;			return this;		}				/**		 * 确保长度的向量是不超过给定值.		 * @param 马克斯最大值这个向量应该。如果长度大于马克斯,它将被截断,使这个值。		 * @return Vector2D引用这个向量.		 */		public function truncate(max:Number):Vector2D		{			length = Math.min(max, length);			return this;		}				/**		 * 这个向量的方向逆转.		 * @return Vector2D引用这个向量.		 */		public function reverse():Vector2D		{			_x = -_x;			_y = -_y;			return this;		}				/**		 * 是否这个向量归一化,即它的长度等于一.		 * @return 布尔真如果长度为1,否则假.		 */		public function isNormalized():Boolean		{			return length == 1.0;		}				/**		 * 点积的计算和另一个向量向量.		 * @param v2另Vector2D实例.		 * @return 点积的数量这个向量和一个作为参数传递进来。		 */		public function dotProd(v2:Vector2D):Number		{			return _x * v2.x + _y * v2.y;		}				/**		 * 计算交叉的产物,向量和另一个向量		 * @param 另一个实例Vector2D v2。		 * @return 数量积的向量和一个作为参数传递进来。		 */		public function crossProd(v2:Vector2D):Number		{			return _x * v2.y - _y * v2.x;		}				/**		 * 计算两向量的夹角.		 * @param v1 第一个Vector2D实例		 * @param v2 第二个Vector2D实例		 * @return 号码之间的夹角两个给定的向量.		 */		public static function angleBetween(v1:Vector2D, v2:Vector2D):Number		{			if(!v1.isNormalized()) v1 = v1.clone().normalize();			if(!v2.isNormalized()) v2 = v2.clone().normalize();			return Math.acos(v1.dotProd(v2));		}				/**		 * 确定是否一个给定的向量的左侧或右侧这个向量.		 * @return int如果向左,返回1。如果向右,+ 1.		 */		public function sign(v2:Vector2D):int		{			return perp.dotProd(v2) < 0 ? -1 : 1;		}				/**		 * 发现一个向量,这个向量是垂直的.		 * @return Vector2D向量,这个向量是垂直的.		 */		public function get perp():Vector2D		{			return new Vector2D(-y, x);		}				/**		 * 计算出距离这个向量到另一个向量.		 * @param v2 一个Vector2D实例.		 * @return 数的距离这个向量的向量作为参数传递。		 */		public function dist(v2:Vector2D):Number		{			return Math.sqrt(distSQ(v2));		}				/**		 * 计算出距离的平方从这个向量到另一个向量.		 * @param v2 一个Vector2D实例。		 * @return 距离的平方数从这个向量的向量作为参数传递。		 */		public function distSQ(v2:Vector2D):Number		{			var dx:Number = v2.x - x;			var dy:Number = v2.y - y;			return dx * dx + dy * dy;		}				/**		 * 增加了一个向量,这个向量,创建一个新的Vector2D实例保存结果。		 * @param v2 一个Vector2D实例.		 * @return 一个新的向量Vector2D包含加法的结果.		 */		public function add(v2:Vector2D):Vector2D		{			return new Vector2D(_x + v2.x, _y + v2.y);		}				/**		 * Subtacts向量,这个向量,创建一个新的Vector2D实例保存结果。		 * @param v2 一个Vector2D实例.		 * @return 一个新的向量Vector2D包含结果的减法。		 */		public function subtract(v2:Vector2D):Vector2D		{			return new Vector2D(_x - v2.x, _y - v2.y);		}				/**		 * 增加这个向量的值,创建一个新的Vector2D实例保存结果。		 * @param v2 一个Vector2D实例..		 * @return 一个新的向量Vector2D包含结果的乘法。		 */		public function multiply(value:Number):Vector2D		{			return new Vector2D(_x * value, _y * value);		}				/**		 * 将这个向量的值,创建一个新的Vector2D实例保存结果。		 * @param v2 一个Vector2D实例.		 * @return 一个新的向量Vector2D包含部门的结果。		 */		public function divide(value:Number):Vector2D		{			return new Vector2D(_x / value, _y / value);		}				/**		 * 指示是否这个向量和另一个Vector2D实例都是平等的价值.		 * @param v2 一个Vector2D实例.		 * @return 布尔真如果其他矢量等于这一个,假如果不是.		 */		public function equals(v2:Vector2D):Boolean		{			return _x == v2.x && _y == v2.y;		}				/**		 * Sets / gets the x value of this vector.		 */		public function set x(value:Number):void		{			_x = value;		}		public function get x():Number		{			return _x;		}				/**		 * Sets / gets the y value of this vector.		 */		public function set y(value:Number):void		{			_y = value;		}		public function get y():Number		{			return _y;		}				/**		 * Generates a string representation of this vector.		 * @return String A description of this vector.		 */		public function toString():String		{			return "[Vector2D (x:" + _x + ", y:" + _y + ")]";		}	}}